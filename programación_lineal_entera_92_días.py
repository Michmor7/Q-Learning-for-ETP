# -*- coding: utf-8 -*-
"""Programación lineal Entera 92 días.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Rf8S1F77UW1t7kUof2hqMjKOsgSXyyp
"""

!pip install pulp

"""# Importar librerías y datos"""

from google.colab import files
import pandas as pd
from pulp import *

# Cargar matrix de requerimientos de personal y costo
load = files.upload()
df = pd.read_csv("shifts - 92c2.csv", index_col=0)

df

"""# Formulación del problema

## Variables del problema
  Parametros de entrada:
   * Número de turnos ($n$)
   * Hora del día ($T$)
   * Número de trabajadores requeridos por hora ($d_t$)
   * Salario por turno ($w_j$)
    
Variables de decisión: Número de trabajadores necesarios por turno de trabajo ($y_j$)

Restricciónes: Demanda por hora $t$ que debe ser cubierta

Objetivo: Minimizar el costo total de salarios pagados a todos los trabajadores

Sea $a_{jt}=1$ si el turno $j$ cubre la ventana temporal $t$ ($j$=1,..,n; t=1,...,$T$) y $a_{jt}=0$ en caso contrario
"""

df = df.fillna(0).applymap(lambda x: 1 if x == "X" else x)

a = df.drop(index=["Salario"], columns=["Requerimiento"]).values
a

# Input parameters
n = a.shape[1]
T = a.shape[0]
d = df["Requerimiento"].values
w = df.loc["Salario", :].values.astype(int)

# Create problem
prob = LpProblem("programar_trabajadores", LpMinimize)

# Decision variables
y = LpVariable.dicts("num_trabajadores", list(range(n)), lowBound=0, cat="Integer")

"""## Formulación

La fomulación del modelo es:

\begin{align}
\text{Minimizar} \;\; &\sum_j w_jy_j\\
\text{Sujeto a} \;\; &\sum_j a_{jt}y_j \geq d_t \;\; t=1,..,T\\
& y_j \geq 0 \text{ y entero } j=1,...,n
\end{align}
"""

# Objective
prob += lpSum([w[j] * y[j] for j in range(n)])

# Subject to
for t in range(T):
    prob += lpSum([a[t, j] * y[j] for j in range(n)]) >= d[t]

prob.solve()
print("Status:", LpStatus[prob.status])

for shift in range(n):
    print(
        f"The number of workers needed for shift {shift+1} is {int(y[shift].value())} workers"
    )

print(
    f"The total amount of money being paid to workers in {n} shifts are ${value(prob.objective)}",
)